<?xml version="1.0" encoding="UTF-8"?>

<launch>

    <!-- START GAZEBO RUNNING -->
    <arg name="debug" default="false" />
    <!--gazebo GUI is on-->
    <arg name="gui" default="false" />
    <!--simulation will start paused-->
    <arg name="pause" default="false" />
    <!--find the custom world defined in the package-->
    <arg name="world" default="$(find rosbot_simulation)/world/lane_merging_track.world" />

    <!--launch the custom world-->
    <include file="$(find gazebo_ros)/launch/empty_world.launch" >
        <arg name="world_name" value="$(arg world)" />
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg pause)" />
        <arg name="use_sim_time" value="true" />

    </include>

    <!-- SPAWN IN THE ROSBOTS -->
    <arg name="x_first" default="-8.5" />
    <arg name="y_first" default="0" />
    <arg name="x_second" default="-8.8" />
    <arg name="y_second" default="0" />
    <arg name="x_third" default="-9.1" />
    <arg name="y_third" default="0" />
    <arg name="x_fourth" default="-9.4" />
    <arg name="y_fourth" default="0" />
    <arg name="x_fifth" default="-9.7" />
    <arg name="y_fifth" default="0" />
    <arg name="max_vel_first" default = "0.3" />
    <arg name="max_vel_second" default = "0.3" />
    <arg name="max_vel_third" default = "0.3" />
    <arg name="max_vel_fourth" default = "0.3" />
    <arg name="max_vel_fifth" default = "0.3" />
    <arg name="filename" default = "0" />


    <param name="robot_description" command="$(find xacro)/xacro.py --inorder '$(find rosbot_description)/urdf/rosbot.xacro' robot_namespace:=/first"/>
    <param name="second_robot_description" command="$(find xacro)/xacro.py --inorder '$(find rosbot_description)/urdf/rosbot.xacro' robot_namespace:=/second"/>
    <param name="third_robot_description" command="$(find xacro)/xacro.py --inorder '$(find rosbot_description)/urdf/rosbot.xacro' robot_namespace:=/third"/>
    <param name="fourth_robot_description" command="$(find xacro)/xacro.py --inorder '$(find rosbot_description)/urdf/rosbot.xacro' robot_namespace:=/fourth"/>
    <param name="fifth_robot_description" command="$(find xacro)/xacro.py --inorder '$(find rosbot_description)/urdf/rosbot.xacro' robot_namespace:=/fifth"/>

    <node name="rosbot_spawn_first" pkg="gazebo_ros" type="spawn_model" output="log" args="-urdf -param robot_description -model rosbot_f -x $(arg x_first) -y $(arg y_first) -z 0.044 -namespace /first">
    </node>
    <node name="rosbot_spawn_second" pkg="gazebo_ros" type="spawn_model" output="log" args="-urdf -param second_robot_description -model rosbot_s -x $(arg x_second) -y $(arg y_second) -z 0.044 -namespace /second">
    </node>
    <node name="rosbot_spawn_third" pkg="gazebo_ros" type="spawn_model" output="log" args="-urdf -param third_robot_description -model rosbot_t -x $(arg x_third) -y $(arg y_third) -z 0.044 -namespace /third">
    </node>
    <node name="rosbot_spawn_fourth" pkg="gazebo_ros" type="spawn_model" output="log" args="-urdf -param fourth_robot_description -model rosbot_fo -x $(arg x_fourth) -y $(arg y_fourth) -z 0.044 -namespace /fourth">
    </node>
    <node name="rosbot_spawn_fifth" pkg="gazebo_ros" type="spawn_model" output="log" args="-urdf -param fifth_robot_description -model rosbot_fi -x $(arg x_fifth) -y $(arg y_fifth) -z 0.044 -namespace /fifth">
    </node>

    <group ns="/first">
      <rosparam command="load" file="$(find joint_state_controller)/joint_state_controller.yaml" />
      <node name="first_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/first" args=" --namespace=/first/joint_state_controller" />
      <node name="first_robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
        <param name="tf_prefix" value="first"/>
      </node>
      <node pkg="tf" type="static_transform_publisher" name="first_odom" args="0 0 0 0 0 0 1 map first/odom 100" />
    </group>

    <group ns="/second">
      <rosparam command="load" file="$(find joint_state_controller)/joint_state_controller.yaml" />
      <node name="second_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/second" args=" --namespace=/second/joint_state_controller" />
      <node name="second_robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
        <remap from="robot_description" to="second_robot_description" />
        <param name="tf_prefix" value="second"/>
      </node>
      <node pkg="tf" type="static_transform_publisher" name="second_odom" args="0 0 0 0 0 0 1 map second/odom 100" />
    </group>

    <group ns="/third">
      <rosparam command="load" file="$(find joint_state_controller)/joint_state_controller.yaml" />
      <node name="third_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/third" args=" --namespace=/third/joint_state_controller" />
      <node name="third_robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
        <remap from="robot_description" to="third_robot_description" />
        <param name="tf_prefix" value="third"/>
      </node>
      <node pkg="tf" type="static_transform_publisher" name="third_odom" args="0 0 0 0 0 0 1 map third/odom 100" />
    </group>

    <group ns="/fourth">
      <rosparam command="load" file="$(find joint_state_controller)/joint_state_controller.yaml" />
      <node name="fourth_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/fourth" args=" --namespace=/fourth/joint_state_controller" />
      <node name="fourth_robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
        <remap from="robot_description" to="fourth_robot_description" />
        <param name="tf_prefix" value="fourth"/>
      </node>
      <node pkg="tf" type="static_transform_publisher" name="fourth_odom" args="0 0 0 0 0 0 1 map fourth/odom 100" />
    </group>

    <group ns="/fifth">
      <rosparam command="load" file="$(find joint_state_controller)/joint_state_controller.yaml" />
      <node name="fifth_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/fifth" args=" --namespace=/fifth/joint_state_controller" />
      <node name="fifth_robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
        <remap from="robot_description" to="fifth_robot_description" />
        <param name="tf_prefix" value="fifth"/>
      </node>
      <node pkg="tf" type="static_transform_publisher" name="fifth_odom" args="0 0 0 0 0 0 1 map fifth/odom 100" />
    </group>




    <!-- <node pkg="timed_roslaunch" type="timed_roslaunch.sh" args="30 scenario_measurements launch_nodes.launch filename:=$(arg filename) max_vel_first:=$(arg max_vel_first) max_vel_second:=$(arg max_vel_second) max_vel_third:=$(arg max_vel_third) max_vel_fourth:=$(arg max_vel_fourth) max_vel_fifth:=$(arg max_vel_fifth)" name="timed_roslaunch_launch_nodes" output="screen" /> -->


    <!--spawn multiple ROSbots in the simulation environment-->
    <!-- <include file="$(find rosbot_simulation)/launch/spawn_5ROS_lmt.launch"/> -->
</launch>
